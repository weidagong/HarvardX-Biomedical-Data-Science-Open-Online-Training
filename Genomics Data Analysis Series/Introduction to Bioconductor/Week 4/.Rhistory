source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
install.packages("tximport")
library(tximport)
install.packages("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport", version = "3.8")
installed.packages()
old.packages()
update.packages()
y
q()
library("acepack", lib.loc="~/R/win-library/3.6")
library("annotate", lib.loc="~/R/win-library/3.6")
library("zlibbioc", lib.loc="~/R/win-library/3.6")
library("acepack", lib.loc="~/R/win-library/3.6")
library("bindrcpp", lib.loc="~/R/win-library/3.6")
library("bindr", lib.loc="~/R/win-library/3.6")
library("BH", lib.loc="~/R/win-library/3.6")
library("base64enc", lib.loc="~/R/win-library/3.6")
library("backports", lib.loc="~/R/win-library/3.6")
library("askpass", lib.loc="~/R/win-library/3.6")
library("assertthat", lib.loc="~/R/win-library/3.6")
library("AnnotationDbi", lib.loc="~/R/win-library/3.6")
library("annotate", lib.loc="~/R/win-library/3.6")
remove.packages("acepack", lib="~/R/win-library/3.6")
ip <- as.data.frame(installed.packages())
head(ip)
head(ip$LibPath)
unique(ip$LibPath)
ip <- ip[!(ip$Priority %in% c("base", "recommended")), ]
unique(ip$Priority)
path.lib <- unique(ip$LibPath)
pkg2remove <- ip[, 1]
head(pkg2remove)
head(ip[,1])
ip[,1]
head(ip)
sapply(pkg2remove, remove.packages, lib = path.lib)
remove.packages("nlme", lib="~/R/win-library/3.6")
remove.packages("cluster", lib="~/R/win-library/3.6")
remove.packages("class", lib="~/R/win-library/3.6")
install.packages("rmarkdown")
setwd("C:/Users/Weida Gong/Downloads/Work computer/HarvardX Biomedical Data Science Open Online Training/Genomics Data Analysis Series/Introduction to Bioconductor/Week 4")
load(".RData")
X
nullX <- sample(X)
nullX
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
B <- 400 # 400 times
null <- saply(1:B, function(i){
nullX <- sample(X)
nullsvaX <- model.matrix(~nullX + svafit$sv)
nulllmfit <- lmFit(geneExpression, nullsvaX)
nulltt<-nulllmfit$coef[,2]*sqrt(nulllmfit$df.residual)/(2*nulllmfit$sigma)
nullavgt <- sapply(gsids,function(i) sqrt(length(i))*mean(nulltt[i]))
return(nullavgt)
})
null <- sapply(1:B, function(i){
nullX <- sample(X)
nullsvaX <- model.matrix(~nullX + svafit$sv)
nulllmfit <- lmFit(geneExpression, nullsvaX)
nulltt<-nulllmfit$coef[,2]*sqrt(nulllmfit$df.residual)/(2*nulllmfit$sigma)
nullavgt <- sapply(gsids,function(i) sqrt(length(i))*mean(nulltt[i]))
return(nullavgt)
})
head(null)
str(null)
(permpval <- rowMeans(abs(avgt) < abs(null)))
permpval[order(permpval)]
head(permpval[order(permpval)])
