source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
install.packages("tximport")
library(tximport)
install.packages("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport", version = "3.8")
installed.packages()
old.packages()
update.packages()
y
q()
library("acepack", lib.loc="~/R/win-library/3.6")
library("annotate", lib.loc="~/R/win-library/3.6")
library("zlibbioc", lib.loc="~/R/win-library/3.6")
library("acepack", lib.loc="~/R/win-library/3.6")
library("bindrcpp", lib.loc="~/R/win-library/3.6")
library("bindr", lib.loc="~/R/win-library/3.6")
library("BH", lib.loc="~/R/win-library/3.6")
library("base64enc", lib.loc="~/R/win-library/3.6")
library("backports", lib.loc="~/R/win-library/3.6")
library("askpass", lib.loc="~/R/win-library/3.6")
library("assertthat", lib.loc="~/R/win-library/3.6")
library("AnnotationDbi", lib.loc="~/R/win-library/3.6")
library("annotate", lib.loc="~/R/win-library/3.6")
remove.packages("acepack", lib="~/R/win-library/3.6")
ip <- as.data.frame(installed.packages())
head(ip)
head(ip$LibPath)
unique(ip$LibPath)
ip <- ip[!(ip$Priority %in% c("base", "recommended")), ]
unique(ip$Priority)
path.lib <- unique(ip$LibPath)
pkg2remove <- ip[, 1]
head(pkg2remove)
head(ip[,1])
ip[,1]
head(ip)
sapply(pkg2remove, remove.packages, lib = path.lib)
remove.packages("nlme", lib="~/R/win-library/3.6")
remove.packages("cluster", lib="~/R/win-library/3.6")
remove.packages("class", lib="~/R/win-library/3.6")
install.packages("rmarkdown")
install.packages("rmarkdown")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue")
BiocManager::install("sva")
BiocManager::install("DESeq2")
setwd("C:/Users/Weida Gong/Downloads/Work computer/HarvardX Biomedical Data Science Open Online Training/Data Analysis for the Life Sciences Series/High-Dimensional Data Analysis/Week 4")
setwd("C:/Users/Weida Gong/Downloads/Work computer/HarvardX Biomedical Data Science Open Online Training/Genomics Data Analysis Series/Introduction to Bioconductor/Week 4")
BiocManager::install("SpikeInSubset")
knitr::opts_chunk$set(echo = TRUE)
library(SpikeInSubset)
data(rna95)
data(rma95)
data(rma95)
str(rma95)
pData(rma95)
str(pData(rma95))
pData(rma95)["37777_at"]
fac <- factor(rep(1:2, each = 3))
pData(rma95)
exprs(rma95)
head(exprs(rma95))
par(mfrow = c(2,2))
for i in 1:4{
par(mfrow = c(2,2))
for (i in 1:4) {
spg <- names(pData(rma95))
plot(1:6, exprs(rma95)[spg[i+6], ], main = spg[i+6], ylab = "RMA", xlab = "Spike-in",
axes = F)
axis(2)
axis(1, at = 1:6, labels = pData(rma95)[, spg[i + 6]])
}
library(genefilter)
rownames(rma95)
rtt <- rowttests(exprs(rma95), fac)
mask <- with(rtt, abs(dm) < 0.2 & p.value < 0.01)
spike <- rownames(rma95) %in% colnames(pData(rma95))
cols <- ifelse(mask, "red", ifelse(spike, "dodgerblue", "black"))
head(rtt)
rtt[spike, ]
plot(-rtt$dm, -log10(rtt$p.value), pch=16, xlim = c(-1, 1)
ylim = c(0, 5), xlab = "difference in means", col = cols)
plot(-rtt$dm, -log10(rtt$p.value), pch=16, xlim = c(-1, 1),
ylim = c(0, 5), xlab = "difference in means", col = cols)
abline(h = 2, v = c(-0.2, 0.2), lty = 2)
rtt$s <- apply(exprs(rma95), 1, function(row){
return(sqrt(0.5 * (var(row[1:3]) + var(row[4:6]))))
})
head(rtt)
plot(rtt$s, rtt$p.value, pch = 16, log = "x", xlab = "Log SD", col= cols)
plot(rtt$s, -log10(rtt$p.value), pch = 16, log = "x", xlab = "Log SD", col= cols)
plot(rtt$s, -log10(rtt$p.value), pch = 16, log = "x", xlab = "Log SD", col= cols)
library(limma)
options(digits = 3)
?lmFit
fit <- lmFit(rma95, design = model.matrix(~fac))
fit
summary(fit)
fit <- eBayes(fit)
summary(fit)
fit <- lmFit(rma95, design = model.matrix(~fac)) #step 1 least squares estimates
head(topTable(fit, coef = 2))
head(fit)
fit
fit$coefficients
fit <- eBayes(fit) # step 2 moderate the t statistics
tt <- topTable(fit, coef = 2)
head(tt)
tt
str(tt)
tt <- topTable(fit, coef = 2, number = Inf, sort.by = "none")
str(tt)
coef(fit)
names(coef(fit))
head(coef(fit))
limmares <- data.frame(dm = coef(fit)[, "fac2"], p.value = fit$p.value[, "fac2"])
plot(limmares$dm, -log10(limmares$p.value), pch = 16, col = cols, xlab = "difference in means",
xlim = c(-1, 1), ylim = c(0, 5))
abline(h =2, v = c(-0.2, 0.2), lty = 2)
plot(limmares$dm, -log10(limmares$p.value), pch = 16, col = cols, xlab = "difference in means",
xlim = c(-1, 1), ylim = c(0, 5))
abline(h =2, v = c(-0.2, 0.2), lty = 2)
seq_len(10)
seq_along(10)
?cut
cut(rtt$s^2, qs)
qs <- seq(0, 0.2, length = n)
n = 40
qs <- seq(0, 0.2, length = n)
cut(rtt$s^2, qs)
as.integer(cut(rtt$s^2, qs))
idx <- sapply(1:n, function(i) which(as.integer(cut(rtt$s^2, qs)) == i)[1])
head(idx)
idx
which(as.integer(cut(rtt$s^2, qs)) == 1)
which(as.integer(cut(rtt$s^2, qs)) == 1)[1]
idx <- sapply(1:n, function(i) which(as.integer(cut(rtt$s^2, qs)) == i)[1])
idx <- idx[!is.na(idx)]
plot(1, 1, xlim = c(0, 1), ylim = c(0, 1), type = "n",
xlab = "variance estimates", ylab = "", yaxt = "n")
axis(2, at = c(0.1, 0.9), c("before", "after"))
segments((rtt$s^2)[idx], rep(0.1, n), fit$s2.post[idx], rep(0.9, n))
plot(1, 1, xlim = c(0, 0.2), ylim = c(0, 1), type = "n",
xlab = "variance estimates", ylab = "", yaxt = "n")
axis(2, at = c(0.1, 0.9), c("before", "after"))
segments((rtt$s^2)[idx], rep(0.1, n), fit$s2.post[idx], rep(0.9, n))
```{r echo = FALSE}
library(SpikeInSubset)
data(rma95)
fac <- factor(rep(1:2, each = 3))
pData(rma95)
```{r, echo = FALSE}
library(SpikeInSubset)
data(rma95)
fac <- factor(rep(1:2, each = 3))
pData(rma95)
```
knitr::opts_chunk$set(echo = TRUE)
library(SpikeInSubset)
data(rma95)
fac <- factor(rep(1:2, each = 3))
pData(rma95)
par(mfrow = c(2,2))
for (i in 1:4) {
spg <- names(pData(rma95))
plot(1:6, exprs(rma95)[spg[i+6], ], main = spg[i+6], ylab = "RMA", xlab = "Spike-in",
axes = F)
axis(2)
axis(1, at = 1:6, labels = pData(rma95)[, spg[i + 6]])
}
library(genefilter)
rtt <- rowttests(exprs(rma95), fac)
mask <- with(rtt, abs(dm) < 0.2 & p.value < 0.01)
spike <- rownames(rma95) %in% colnames(pData(rma95))
cols <- ifelse(mask, "red", ifelse(spike, "dodgerblue", "black"))
plot(-rtt$dm, -log10(rtt$p.value), pch=16, xlim = c(-1, 1),
ylim = c(0, 5), xlab = "difference in means", col = cols)
abline(h = 2, v = c(-0.2, 0.2), lty = 2)
rtt$s <- apply(exprs(rma95), 1, function(row){
return(sqrt(0.5 * (var(row[1:3]) + var(row[4:6]))))
})
plot(rtt$s, -log10(rtt$p.value), pch = 16, log = "x", xlab = "Log SD", col= cols)
library(limma)
options(digits = 3)
fit <- lmFit(rma95, design = model.matrix(~fac)) #step 1 least squares estimates
fit <- eBayes(fit) # step 2 moderate the t statistics
tt <- topTable(fit, coef = 2, number = Inf, sort.by = "none")
limmares <- data.frame(dm = coef(fit)[, "fac2"], p.value = fit$p.value[, "fac2"])
plot(limmares$dm, -log10(limmares$p.value), pch = 16, col = cols, xlab = "difference in means",
xlim = c(-1, 1), ylim = c(0, 5))
abline(h =2, v = c(-0.2, 0.2), lty = 2)
n = 40
qs <- seq(0, 0.2, length = n)
idx <- sapply(1:n, function(i) which(as.integer(cut(rtt$s^2, qs)) == i)[1])
idx <- idx[!is.na(idx)]
plot(1, 1, xlim = c(0, 0.2), ylim = c(0, 1), type = "n",
xlab = "variance estimates", ylab = "", yaxt = "n")
axis(2, at = c(0.1, 0.9), c("before", "after"))
segments((rtt$s^2)[idx], rep(0.1, n), fit$s2.post[idx], rep(0.9, n))
