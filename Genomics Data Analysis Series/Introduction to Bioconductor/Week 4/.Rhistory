source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
install.packages("tximport")
library(tximport)
install.packages("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport", version = "3.8")
installed.packages()
old.packages()
update.packages()
y
q()
library("acepack", lib.loc="~/R/win-library/3.6")
library("annotate", lib.loc="~/R/win-library/3.6")
library("zlibbioc", lib.loc="~/R/win-library/3.6")
library("acepack", lib.loc="~/R/win-library/3.6")
library("bindrcpp", lib.loc="~/R/win-library/3.6")
library("bindr", lib.loc="~/R/win-library/3.6")
library("BH", lib.loc="~/R/win-library/3.6")
library("base64enc", lib.loc="~/R/win-library/3.6")
library("backports", lib.loc="~/R/win-library/3.6")
library("askpass", lib.loc="~/R/win-library/3.6")
library("assertthat", lib.loc="~/R/win-library/3.6")
library("AnnotationDbi", lib.loc="~/R/win-library/3.6")
library("annotate", lib.loc="~/R/win-library/3.6")
remove.packages("acepack", lib="~/R/win-library/3.6")
ip <- as.data.frame(installed.packages())
head(ip)
head(ip$LibPath)
unique(ip$LibPath)
ip <- ip[!(ip$Priority %in% c("base", "recommended")), ]
unique(ip$Priority)
path.lib <- unique(ip$LibPath)
pkg2remove <- ip[, 1]
head(pkg2remove)
head(ip[,1])
ip[,1]
head(ip)
sapply(pkg2remove, remove.packages, lib = path.lib)
remove.packages("nlme", lib="~/R/win-library/3.6")
remove.packages("cluster", lib="~/R/win-library/3.6")
remove.packages("class", lib="~/R/win-library/3.6")
install.packages("rmarkdown")
setwd("C:/Users/Weida Gong/Downloads/Work computer/HarvardX Biomedical Data Science Open Online Training/Genomics Data Analysis Series/Introduction to Bioconductor/Week 4")
knitr::opts_chunk$set(echo = TRUE)
library(sva)
library(limma)
library(matrixStats)
library(GSEABase)
load("GSE5859Subset.rda")
X <- sampleInfo$group
mod <- model.matrix(~X)
svafit <- sva(geneExpression, mod)
svaX <- model.matrix(~X+svafit$sv)
lmfit <- lmFit(geneExpression, svaX)
tt<-lmfit$coef[,2]*sqrt(lmfit$df.residual)/(2*lmfit$sigma)
pval <- 2*(1-pt(abs(tt), lmfit$df.residual))
qval <- p.adjust(pval)
gsets <- getGmt("c1.all.v6.1.entrez.gmt")
mapGMT2Affy <- function(object,gsets){
ann<-annotation(object)
dbname<-paste(ann,"db",sep=".")
require(dbname,character.only=TRUE)
gns<-featureNames(object)
##This call may generate warnings
map<-select(get(dbname), keys=gns,columns=c("ENTREZID", "PROBEID"))
map<-split(map[,1],map[,2])
indexes<-sapply(gsets,function(ids){
gns2<-unlist(map[geneIds(ids)])
match(gns2,gns)
})
names(indexes)<-names(gsets)
return(indexes)
}
rownames(sampleInfo) <- colnames(geneExpression)
e <- ExpressionSet(assay = geneExpression,
phenoData = AnnotatedDataFrame(sampleInfo),
annotation = "hgfocus")
gsids <- mapGMT2Affy(e, gsets)
tab <- table(ingenset = 1:nrow(e) %in% gsids[["chryq11"]], signif = qval < 0.05)
chisq.test(tab)$p.val
ind <- gsids[['chrxp11]]
''
]
'
ind <- gsids[['chrxp11']]
ind
density(tt[-ind])
plot(density(tt[-ind]), xlim = c(-7, 7), main = "", xlab = 't-stat', lwd = 4)
lines(density(tt[ind]), col = 2, lty = 2, lwy = 4)
plot(density(tt[-ind]), xlim = c(-7, 7), main = "", xlab = 't-stat', lwd = 4)
lines(density(tt[ind]), col = 2, lty = 2, lwy = 4)
mypar(1,1)
plot(density(tt[-ind]), xlim = c(-7, 7), main = "", xlab = 't-stat', lwd = 4)
lines(density(tt[ind]), col = 2, lty = 2, lwd = 4)
plot(density(tt[-ind]), xlim = c(-7, 7), main = "", xlab = 't-stat', lwd = 4)
lines(density(tt[ind]), col = 2, lty = 2, lwd = 4)
legend("topleft", legend = c("present on xp11", "not on xp11"), col = c(2, 1), lty = c(2, 1))
plot(density(tt[-ind]), xlim = c(-7, 7), main = "", xlab = 't-stat', lwd = 4)
lines(density(tt[ind]), col = 2, lty = 2, lwd = 4)
legend("topleft", legend = c("present on xp11", "not on xp11"), col = c(2, 1), lty = c(2, 1))
es <- lmfit$coefficients[, 2]
head(es)
str(gsids)
wilcox.test(es[3688], es[-3688])
wilcox.test(es[3688], es[-3688])$stat
a <- wilcox.test(es[3688], es[-3688])
a
str(a)
wilcox <- sapply(gsids, function(i){
tmp <- wilcox.test(e[i], e[-1])
return(tmp$p.value)
})
wilcox <- sapply(gsids, function(i){
tmp <- wilcox.test(e[i], e[-i])
return(tmp$p.value)
})
gsids
es <- lmfit$coefficients[, 2]
wilcox <- sapply(gsids, function(i){
tmp <- wilcox.test(es[i], es[-i])
return(tmp$p.value)
})
es
gsids
es
es[gsids[[1]]]
wilcox.test(es[[1]], es[[-1]])
wilcox <- sapply(gsids, function(i){
tmp <- wilcox.test(es[i], es[-i])
return(tmp$p.value)
})
sapply(gsids, length)
min(sapply(gsids, length))
wilcox <- sapply(gsids, function(i){
if (length(i) > 2){
tmp <- wilcox.test(es[i], es[-i])
return(tmp$p.value)
}
else{
return(NA)
}
})
hist(wilcox)
hist(wilcox)
avgt <- sapply(gsids, function(i){
sqrt(length(i)*mean(tt[i]))
})
avgt <- sapply(gsids, function(i){
sqrt(length(i))*mean(tt[i])
})
avgt
avgt[order(-abs(avgt))[1:10]]
